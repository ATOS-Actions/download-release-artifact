name: 'Download Release Artifact'
description: 'Download a release artifact that was previously uploaded in the workflow by the upload-artifact action'

inputs:
  name:
    description: 'Artifact name'
    required: true
  path:
    description: 'Destination path'
    required: false
    default: '.'
  tag:
    description: The release tag to download from
    required: true
  token:
    description: Github personal access token with repo permissions
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - id: path
      name: 'üìÅ Create destination path'
      shell: bash
      run: |
        if [[ "${{inputs.path}}" != "." ]]; then
          mkdir -p "${{inputs.path}}"
        fi

    - id: release_info
      name: 'üìë Get release info'
      shell: bash
      env:
        RELEASE_URL: ${{github.api_url}}/repos/${{ github.repository }}/releases/tags/${{ inputs.tag }}
      run: |
        echo "üìë Get release info from ${{ env.RELEASE_URL }}"
        echo RELEASE_INFO=$(curl -s -H "Authorization: token ${{ inputs.token }}" ${RELEASE_URL}) >> $GITHUB_ENV

    - id: get_artifact_url
      name: 'üîó Get Artifact URL'
      shell: bash
      working-directory: ${{ inputs.path }}
      env:
        RELEASE_INFO: ${{ env.RELEASE_INFO }}
      run: |
        echo ASSET_URL=$(echo $RELEASE_INFO | jq ".assets[] | select(.name==\"${{ inputs.name }}\") | .url" | sed 's/\"//g') >> $GITHUB_ENV

    - id: get_artifact
      name: 'üì• Download Artifact'
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [[ -n "${{env.ASSET_URL}}" ]]; then
          echo "üì• Download Artifact from ${{ env.ASSET_URL }}"
          curl -vLJO -H 'Accept: application/octet-stream' \
            -H "Authorization: token ${{ inputs.token }}" \
            "${{ env.ASSET_URL }}?access_token=${{ inputs.token }}"
        else
          echo "‚ùå Artifact is missing from release ${{ inputs.tag }}"
          exit 1
        fi
